# !/bin/bash
#
# Lution-AIS installer (version 0.3 - September 2014)
#
# Written by Carl Duff for Evo/Lution Linux
#
# Some code has been used or adapted from the Arch Installation Script (AIS)
# and Arch Ultimate Installer (AUI) written by helmuthdu, the Antergos 
# CLI installer written by Alex Filgueira, and the Manjaro 0.8 installer
# Written by Philip Muller.
#
# This program is free software, provided under the GNU General Public License
# as published by the Free Software Foundation. So feel free to copy, distribute,
# or modify it as you wish.
#



######################################################################
##																	##
##                   Installer Variables							##
##																	##
######################################################################

# Create a temporary file to store menu selections
ANSWER="/tmp/.lution"

# Save retyping
VERSION="Lution-AIS 0.3"

# Installation
  KDE_INSTALLED=0      	# Has KDE been installed? Used for display manager option
  GNOME_INSTALLED=0    	# Has Gnome been installed? Used for display manager option
  LXDE_INSTALLED=0     	# Has LXDE been installed? Used for display manager option
  DM_INSTALLED=0       	# Has a display manager been installed?
  COMMON_INSTALLED=0   	# Has the common-packages option been taken?
  NM_INSTALLED=0       	# Has a network connection manager been installed and enabled?
  KEYMAP="us"          	# Virtual console keymap. Default is "us"
  XKBMAP="us"      	    # X11 keyboard layout. Default is "us"
  ZONE=""               # For time
  SUBZONE=""            # For time
  LOCALE="en_US.UTF-8"  # System locale. Default is "en_US.UTF-8"
  LTS=0                	# Has the LTS Kernel been installed?
  GRAPHIC_CARD=`hwinfo --gfxcard|grep 'Model:[[:space:]]'`  # Auto-detect popular graphics cards
  GC_DETECTED=""        # Name of Graphics Card Detected
  NVIDIA_INST=0         # Indicates if NVIDIA proprietary driver has been installed
  SHOW_ONCE=0           # Show de_wm information only once
  
# Architecture
  ARCHI=`uname -m`     	# Display whether 32 or 64 bit system
  UEFI=0               	# Is the system UEFI?
  SYSTEM="Unknown"     	# Display whether system is BIOS or UEFI. Default is "unknown"
  ROOT_PART=""          # ROOT partition
  UEFI_PART=""			# UEFI partition
  UEFI_MOUNT=""         # UEFI mountpoint
  INST_DEV=""           # Device where system has been installed
  HIGHLIGHT=0           # Highlight items for Main Menu
  HIGHLIGHT_SUB=0	    # Highlight items for submenu
  SUB_MENU=""           # Submenu to be highlighted

# Installation
  MOUNTPOINT="/mnt"


######################################################################
##																	##
##                        Core Functions							##
##																	##
######################################################################


# Check user is root, and that there is an active internet connection
# Seperated the checks into seperate "if" statements for readability.
check_evo_requirements() {
	
  dialog --backtitle "$VERSION" --title " Checking Evo Requirements " --infobox "\nChecking installer has been run as root and that there is an active internet connection. Please wait..." 7 40
  sleep 2
  
  if [[ `whoami` != "root" ]]; then
     dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Root Failure " --infobox "\nThe installer must be run as root. Exiting.\n" 6 30
     sleep 2
     exit 1
  fi
  
  if [[ ! ` ping -c 1 google.com ` ]]; then
     dialog --backtitle "$VERSION" --title " Connection Failure " --infobox "\nInternet connection test failed. Exiting.\n" 6 30
     sleep 2
     exit 1
  else
     dialog --backtitle "$VERSION" --title " Requirements Met " --infobox "\nAll checks passed! \n" 5 30
     sleep 2   
     clear
     pacman -Syy
  fi

}

# Modified from the AIS check_boot_system function to identify if
# system is made by Apple, and whether BIOS or UEFI is used.
id_system() {
    if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]; then
      modprobe -r -q efivars || true  # if MAC
    else
      modprobe -q efivarfs            # all others
    fi
    
    if [[ -d "/sys/firmware/efi/" ]]; then
      ## Mount efivarfs if it is not already mounted
      if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
      fi
      UEFI=1
      SYSTEM="UEFI System Detected"
    else
      UEFI=0
      SYSTEM="BIOS System Detected"
    fi
}

# Taken from AIS. An excellent bit of code!
arch_chroot() {
    arch-chroot $MOUNTPOINT /bin/bash -c "${1}"
}  

######################################################################
##																	##
##                 Configuration Functions							##
##																	##
######################################################################


# Adapted from AIS. Added option to allow users to edit the mirrorlist.
configure_mirrorlist() {

# Generate a mirrorlist based on the country chosen.	
mirror_by_country() {

 COUNTRY_LIST=""
 countries_list=("AU_Australia AT_Austria BY_Belarus BE_Belgium BR_Brazil BG_Bulgaria CA_Canada CL_Chile CN_China CO_Colombia CZ_Czech_Republic DK_Denmark EE_Estonia FI_Finland FR_France DE_Germany GB_United_Kingdom GR_Greece HU_Hungary IN_India IE_Ireland IL_Israel IT_Italy JP_Japan KZ_Kazakhstan KR_Korea LV_Latvia LU_Luxembourg MK_Macedonia NL_Netherlands NC_New_Caledonia NZ_New_Zealand NO_Norway PL_Poland PT_Portugal RO_Romania RU_Russia RS_Serbia SG_Singapore SK_Slovakia ZA_South_Africa ES_Spain LK_Sri_Lanka SE_Sweden CH_Switzerland TW_Taiwan TR_Turkey UA_Ukraine US_United_States UZ_Uzbekistan VN_Vietnam")

 for i in ${countries_list}; do
     COUNTRY_LIST="${COUNTRY_LIST} ${i} -"
 done
	
 dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Country " --menu "\nA list of mirrors by the selected country will be generated.\n\nOnce reviewed, you can choose to use it or not." 20 45 16 ${COUNTRY_LIST} 2>${ANSWER} || prep_menu
 COUNTRY_CODE=$(cat ${ANSWER} |sed 's/_.*//')

 URL="https://www.archlinux.org/mirrorlist/?country=${COUNTRY_CODE}&use_mirror_status=on"
 MIRROR_TEMP=$(mktemp --suffix=-mirrorlist)

 # Get latest mirror list and save to tmpfile
 dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Generating Mirrorlist " --infobox "\nGenerating a mirrorlist. Please wait... " 7 40
  
 curl -so ${MIRROR_TEMP} ${URL}
 sed -i 's/^#Server/Server/g' ${MIRROR_TEMP}
 leafpad ${MIRROR_TEMP}

 dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --yesno $"Use generated mirrorlist for installer?" 0 0 \
 && mv -i -f /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig \
 && mv -i -f ${MIRROR_TEMP} /etc/pacman.d/mirrorlist \
 && chmod +r /etc/pacman.d/mirrorlist \
 && dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --msgbox "\nDone! Original Mirrorlist has been saved as:\n\n/etc/pacman.d/mirrorlist.orig" 10 40 || prep_menu
}

dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Mirrorlist " \
    --menu $"\nThe mirrorlist contains server addresses used by pacman to install packages. They are accessed by pacman in the order listed.\n\n" 13 45 2 \
	"1" $"Generate list by Country" \
	"2" $"Manually edit mirrorlist" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") mirror_by_country
             ;;
        "2") gksu leafpad /etc/pacman.d/mirrorlist
             ;;
          *) prep_menu
             ;;
    esac  	

}

# Simplified from the Arch --> Cinnarch/Antergos --> Manjaro installer code.
set_keymap() { 
	
	KEYMAPS=""
    for i in $(find /usr/share/kbd/keymaps -follow -name "*.gz" | sed 's|^.*/||g' | sed 's/.map.*//' | sort); do
        KEYMAPS="${KEYMAPS} ${i} -"
    done
    
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Keymap " \
    --menu "\nUse the [pg up] and [pg dwn] keys for navigation, or press the first letter of the keymap if known." 20 40 16 ${KEYMAPS} 2>${ANSWER} || config_base_menu
    KEYMAP=$(cat ${ANSWER})
    echo "KEYMAP=$KEYMAP" > ${MOUNTPOINT}/etc/vconsole.conf
    
  }

# Set keymap for X11
 set_xkbmap() {
	 
	XKBMAP_LIST=""
	keymaps_xkb=("af_Afghani al_Albanian am_Armenian ara_Arabic at_German-Austria az_Azerbaijani ba_Bosnian bd_Bangla be_Belgian bg_Bulgarian br_Portuguese-Brazil bt_Dzongkha bw_Tswana by_Belarusian ca_French-Canada cd_French-DR-Congo ch_German-Switzerland cm_English-Cameroon cn_Chinese cz_Czech de_German dk_Danishee_Estonian epo_Esperanto es_Spanish et_Amharic fo_Faroese fi_Finnish fr_French gb_English-UK ge_Georgian gh_English-Ghana gn_French-Guinea gr_Greek hr_Croatian hu_Hungarian ie_Irish il_Hebrew iq_Iraqi ir_Persian is_Icelandic it_Italian jp_Japanese ke_Swahili-Kenya kg_Kyrgyz kh_Khmer-Cambodia kr_Korean kz_Kazakh la_Lao latam_Spanish-Lat-American lk_Sinhala-phonetic lt_Lithuanian lv_Latvian ma_Arabic-Morocco mao_Maori md_Moldavian me_Montenegrin mk_Macedonian ml_Bambara mm_Burmese mn_Mongolian mt_Maltese mv_Dhivehi ng_English-Nigeria nl_Dutch no_Norwegian np_Nepali ph_Filipino pk_Urdu-Pakistan pl_Polish pt_Portuguese ro_Romanian rs_Serbian ru_Russian se_Swedish si_Slovenian sk_Slovak sn_Wolof sy_Arabic-Syria th_Thai tj_Tajik tm_Turkmen tr_Turkish tw_Taiwanese tz_Swahili-Tanzania ua_Ukrainian us_English-US uz_Uzbek vn_Vietnamese za_English-S-Africa")
    
	for i in ${keymaps_xkb}; do
        XKBMAP_LIST="${XKBMAP_LIST} ${i} -"
    done
	
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select xkbmap " --menu "Select Keyboard Layout" 20 45 16 ${XKBMAP_LIST} 2>${ANSWER} || prep_menu
    XKBMAP=$(cat ${ANSWER} |sed 's/_.*//')
    echo -e "Section "\"InputClass"\"\nIdentifier "\"system-keyboard"\"\nMatchIsKeyboard "\"on"\"\nOption "\"XkbLayout"\" "\"${XKBMAP}"\"\nEndSection" > /tmp/00-keyboard.conf
    setxkbmap $XKBMAP
 
}

# locale array generation code taken from the Manjaro 0.8 installer
set_locale() {
	
  LOCALES=""	
  for i in $(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8); do
      LOCALES="${LOCALES} ${i} -"
  done

  dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select locale " --menu "Select A Locale" 22 30 16 ${LOCALES} 2>${ANSWER} || config_base_menu 
  LOCALE=$(cat ${ANSWER})
  
  echo 'LANG="'$LOCALE'"' > ${MOUNTPOINT}/etc/locale.conf  
  arch_chroot "sed -i '/'${LOCALE}'/s/^#//' /etc/locale.gen"
  arch_chroot "locale-gen"
}

# Zone and sub-zone array generation code taken from the Manjaro 0.8 Installer
set_timezone() {

    ZONE=""
    for i in $(grep '^[A-Z]' /usr/share/zoneinfo/zone.tab | cut -f 3 | sed -e 's#/.*##g'| sort -u); do
      ZONE="$ZONE ${i} -"
    done
    
     dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Time Zone " --menu "\nThe time zone is used to correctly set your system clock." 19 40 11 ${ZONE} 2>${ANSWER} || config_base_menu
     ZONE=$(cat ${ANSWER}) 
    
     SUBZONE=""
     for i in $(grep '^[A-Z]' /usr/share/zoneinfo/zone.tab | grep $ZONE/ | cut -f 3 | sed -e "s#$ZONE/##g"| sort -u); do
        SUBZONE="$SUBZONE ${i} -"
     done
         
     dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Time Sub-Zone " --menu "\nSelect the city nearest to you." 19 40 11 ${SUBZONE} 2>${ANSWER} || config_base_menu
     SUBZONE=$(cat ${ANSWER}) 
    
     dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --yesno $"Set Time Zone as ${ZONE}/${SUBZONE} ?" 0 0 && arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime" || config_base_menu
    
}

set_hw_clock() {
	
   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set Hardware Clock " \
    --menu $"\nUTC is the universal time standard, and is recommended unless dual-booting with Windows." 12 45 2 \
 	"1" $"UTC" \
	"2" $"Local Time" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") arch_chroot "hwclock --systohc --utc" 
             ;;
        "2") arch_chroot "hwclock --systohc --localtime"
             ;;
          *) config_base_menu
             ;;
     esac	
}

# Adapted from AIS. As with some other functions, decided that keeping the numbering for options
# was worth repeating portions of code.
generate_fstab() {

    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Generate FSTAB " \
    --menu "\nThe FSTAB file (File System TABle) sets what storage devices and partitions are to be mounted, and how they are to be used.\n\nUUID/PARTUUID (Universally Unique IDentifier) is recommended.\n\nIf no labels were set for the partitions earlier, device names will be used for the label option." 19 60 3 \
	"1" $"Dev (partition code)" \
	"2" $"Label (user defined)" \
	"3" $"UUID/PARTUUID (unique code)" 2>${ANSWER}

    case $(cat ${ANSWER}) in
        "1") genfstab -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
             ;;
        "2") genfstab -L -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
             ;;
        "3") if [[ $UEFI -eq 1 ]]; then
                genfstab -t PARTUUID -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
             else 
                genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
             fi
             ;;
          *) config_base_menu
             ;;
    esac

    #[[ $SWAPFILE -eq 1 ]] && sed -i "s/\/mnt//" ${MOUNTPOINT}/etc/fstab
    [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" ${MOUNTPOINT}/etc/fstab
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Check FSTAB " --msgbox "\nPlease check the FSTAB file, before closing it to continue." 0 0
    gksu leafpad ${MOUNTPOINT}/etc/fstab
}

# Adapted from AIS.
set_hostname() {

   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Configure Host Name " --inputbox "\nThe host name is used to identify the system on a network.\n\nIt is restricted to alphanumeric characters, can contain a hyphen (-) - but not at the start or end - and must be no longer than 63 characters.\n" 12 65 "evo" 2>${ANSWER} || config_base_menu
   HOST_NAME=$(cat ${ANSWER})

   echo "$HOST_NAME" > ${MOUNTPOINT}/etc/hostname
   arch_chroot "sed -i '/127.0.0.1/s/$/ '${HOST_NAME}'/' /etc/hosts"
   arch_chroot "sed -i '/::1/s/$/ '${HOST_NAME}'/' /etc/hosts"
}

# Adapted and simplified from the Manjaro 0.8 and Antergos 2.0 installers
set_root_password() {


    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set Root Password " --clear --insecure --passwordbox "\nEnter Root password\n\n" 10 55 2> ${ANSWER} || config_user_menu
    PASSWD=$(cat ${ANSWER})
    
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set Root Password " --clear --insecure --passwordbox "\nRe-enter Root password\n\n" 10 55 2> ${ANSWER} || config_user_menu
    PASSWD2=$(cat ${ANSWER})
    
    if [[ $PASSWD == $PASSWD2 ]]; then 
       echo -e "${PASSWD}\n${PASSWD}" > /tmp/.passwd
       arch_chroot "passwd root" < /tmp/.passwd >/dev/null 2>&1
       rm /tmp/.passwd
    else
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Root Password Error " --msgbox $"\nThe Root passwords entered do not match. Please try again.\n" 8 35
       set_root_password
    fi

}

# Adapted and simplified from the Antergos 2.0 installer
create_new_user() {

        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Create New User " --inputbox "\nEnter the user name.\n\nIt is recommended to use all lower-case letters.\n" 11 55 "" 2>${ANSWER} || config_user_menu
        USER=$(cat ${ANSWER})
        
        if [[ $USER == "" ]]; then
           dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " User Name Error " --msgbox $"\nNo user name was entered. Please try again.\n" 8 35
           create_new_user
        else
           dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set User Password " --clear --insecure --passwordbox "\nEnter password for $USER\n\n" 10 55 2> ${ANSWER} || config_user_menu
           PASSWD=$(cat ${ANSWER}) 
    
           dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set User Password " --clear --insecure --passwordbox "\nRe-enter password for $USER\n\n" 10 55 2> ${ANSWER} || config_user_menu
           PASSWD2=$(cat ${ANSWER}) 
    
           if [[ $PASSWD == $PASSWD2 ]]; then         
              dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Setting User " --infobox "\nCreating User and setting groups...\n" 6 40
              sleep 2
              arch_chroot "useradd ${USER} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
              echo -e "${PASSWD}\n${PASSWD}" > /tmp/.passwd
              arch_chroot "passwd ${USER}" < /tmp/.passwd >/dev/null 2>&1
              rm /tmp/.passwd
              arch_chroot "sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers"
           else
              dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " User Password Error " --msgbox $"\nThe User passwords entered do not match. Please try again.\n" 8 35
              create_new_user
           fi
         fi
}

run_mkinitcpio() {
	
  clear
  if [[ $LTS -eq 1 ]]; then
     arch_chroot "mkinitcpio -p linux-lts"
  else
     arch_chroot "mkinitcpio -p linux"
  fi

}

######################################################################
##																	##
##            System and Partitioning Functions						##
##																	##
######################################################################



# Unmount partitions (AIS)
umount_partitions(){
  mounted_partitions=(`lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r`)
  swapoff -a
  for i in ${mounted_partitions[@]}; do
    umount $i
  done
}

# Adapted from AIS
confirm_mount() {
    if mount | grep $1; then
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Mount Status " --infobox "\nMount Successful!\n" 5 30
      sleep 2
      PARTITIONS="$(echo $PARTITIONS | sed s/${PARTITION}$' -'//)"
      NUMBER_PARTITIONS=$(( NUMBER_PARTITIONS - 1 ))
    else
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Mount Status " --infobox "Mount Failed!" 5 30
      sleep 2
      prep_menu
    fi
}

# Adapted from AIS. However, this does not assume that the formatted device is the Root
# installation device; more than one device may be formatted. This is now set in the
# mount_partitions function, when the Root is chosen.
select_device() {
	
    DEVICE=""
    devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd'`);
    
    for i in ${devices_list[@]}; do
        DEVICE="${DEVICE} ${i} -"
    done
    
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Device " --menu "\nDevices (/dev) are available hard-disks and USB-sticks to install on. The first is /sda, the second /sdb, and so on.\n\nWhere using a USB-stick to boot Evo, be careful as it will also be listed!" 16 45 3 ${DEVICE} 2>${ANSWER} || prep_menu
    DEVICE=$(cat ${ANSWER})
 
  }

# Same as above, but goes to install_base_menu instead where cancelling
select_grub_device() {
	
    GRUB_DEVICE=""
    grub_devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd'`);
    
    for i in ${grub_devices_list[@]}; do
        GRUB_DEVICE="${GRUB_DEVICE} ${i} -"
    done
    
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Grub Device " --menu "\nDevices (/dev) are available hard-disks and USB-sticks to install on. The first is /sda, the second /sdb, and so on.\n\nWhere using a USB-stick to boot Evo, be careful as it will also be listed!" 16 45 3 ${GRUB_DEVICE} 2>${ANSWER} || install_base_menu
    GRUB_DEVICE=$(cat ${ANSWER})
    clear
    arch_chroot "grub-install --target=i386-pc --recheck ${GRUB_DEVICE}"
 
  }

# Adapted from AIS. Integrated Gparted, and dropped most of the other partitioning tools.
create_partitions(){
# add more paritioning tools
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Partitioning Tool " \
    --menu $"\nGParted is a recommended user-friendly graphical tool that supports both BIOS and UEFI systems." 13 55 3 \
 	"1" $"GParted (GUI - BIOS & UEFI)" \
	"2" $"CFDisk  (CLI - BIOS)" \
	"3" $"GDisk   (CLI - UEFI/GPT)" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") gksu gparted ${DEVICE} >/dev/null 2>&1
             ;;
        "2") cfdisk ${DEVICE}
             ;;
        "3") gdisk ${DEVICE}
             ;;
          *) prep_menu
             ;;
    esac  	
}	

# find all available partitions and generate a list of them
# This also includes partitions on different devices.
find_partitions() {

	PARTITIONS=""
    partition_list=(`lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'`)
	
    for i in ${partition_list[@]}; do
        PARTITIONS="${PARTITIONS} ${i} -"
    done
    
    echo $PARTITIONS
    NUMBER_PARTITIONS=${#partition_list[@]}
    
    # Deal with incorrect partitioning
    if [[ $NUMBER_PARTITIONS < 2 ]] && [[ $UEFI -eq 1 ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " UEFI Partitioning Error " --msgbox $"\nUEFI systems require a minimum of two partitions for installation (ROOT and UEFI).\n\nPlease configure your partitions." 0 0
        create_partitions
    fi
    
    if [[ $NUMBER_PARTITIONS -eq 0 ]] && [[ $UEFI -eq 0 ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " BIOS Partitioning Error " --msgbox $"\nBIOS systems require a minmum of one partition for installation (ROOT).\n\nPlease configure your partitions." 0 0	
        create_partitions
    fi
}

# Set static list of filesystems rather than on-the-fly. Partially as most require additional flags, and partially because some don't seem
# to be remotely viable choices.
select_filesystem(){

dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Choose Filesystem " \
    --menu $"\nExt4 is recommended. Not all filesystems are viable for Root or Boot partitions. All have different features and limitations." 19 40 8 \
 	"1" $"Skip / None" \
	"2" $"ext2" \
 	"3" $"ext3" \
	"4" $"ext4" \
	"5" $"jfs" \
 	"6" $"nilfs2" \
	"7" $"ntfs" \
	"8" $"reiserfs" \
 	"9" $"vfat" \
	"10" $"xfs" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") FILESYSTEM="skip"
             ;;
        "2") FILESYSTEM="mkfs.ext2 -F"
             ;;
        "3") FILESYSTEM="mkfs.ext3 -F"
             ;;            
        "4") FILESYSTEM="mkfs.ext4 -F"
             ;;
        "5") FILESYSTEM="mkfs.jfs -q"
             ;;
        "6") FILESYSTEM="mkfs.nilfs2 -f"
             ;;  
        "7") FILESYSTEM="mkfs.ntfs -q"
             ;;  
        "8") FILESYSTEM="mkfs.reiserfs -f -f"
             ;;  
       "9") FILESYSTEM="mkfs.vfat -F32"
             ;;  
       "10") FILESYSTEM="mkfs.xfs -f"
             ;;      
          *) prep_menu
             ;;
    esac

  }
  
mount_partitions() {
	
	# Ensure all partitions are unmounted (e.g. could still be mounted from the partitioning tool)
    # Then list available partitions
	find_partitions
	
	# Identify and mount root
	dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select ROOT Partition " --menu "\nThis is the partition where Arch will be installed." 13 40 4 ${PARTITIONS} 2>${ANSWER} || prep_menu
	PARTITION=$(cat ${ANSWER})
    ROOT_PART=${PARTITION}
	INST_DEV=$"/dev/"$(cat ${ANSWER} | sed 's/[0-9]*//g')
	
	select_filesystem
	if [[ $FILESYSTEM != "skip" ]]; then	
	   ${FILESYSTEM} $"/dev/"${PARTITION} >/dev/null 2>&1
	fi
	
	mkdir -p ${MOUNTPOINT}
	mount $"/dev/"${PARTITION} ${MOUNTPOINT}
    confirm_mount ${MOUNTPOINT}
	
	# Identify and create swap, if applicable
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select SWAP Partition " --menu "\nIf using a Swapfile, it will be the same size as your RAM." 13 40 4 $"None" $"-" $"Swapfile" $"-" ${PARTITIONS} 2>${ANSWER} || prep_menu  
    if [[ $(cat ${ANSWER}) != "None" ]]; then    
       PARTITION=$(cat ${ANSWER})
       
       if [[ $PARTITION == "Swapfile" ]]; then
          total_memory=`grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//'`
          fallocate -l ${total_memory}M ${MOUNTPOINT}/swapfile >/dev/null 2>&1
          chmod 600 ${MOUNTPOINT}/swapfile >/dev/null 2>&1
          mkswap ${MOUNTPOINT}/swapfile >/dev/null 2>&1
          swapon ${MOUNTPOINT}/swapfile >/dev/null 2>&1
       else
          mkswap  $"/dev/"${PARTITION} >/dev/null 2>&1
          swapon  $"/dev/"${PARTITION} >/dev/null 2>&1
          # Since a partition was used, remove that partition from the list
          PARTITIONS="$(echo $PARTITIONS | sed s/${PARTITION}$' -'//)"
          NUMBER_PARTITIONS=$(( NUMBER_PARTITIONS - 1 ))
       fi
    fi
    
    # Extra Step for VFAT UEFI Partition
    if [[ $UEFI -eq 1 ]]; then
    
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select UEFI Partition " --menu "\nThis is a special partition for booting UEFI systems." 13 40 4 ${PARTITIONS} 2>${ANSWER} || config_base_menu  
       PARTITION=$(cat ${ANSWER})
       UEFI_PART=$"/dev/"${PARTITION}
       
       # If there is already a fat/vfat partition...
       if [[ $(fsck -N /dev/$PARTITION | grep fat) ]]; then
          dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " UEFI Partition " --yesno $"The UEFI partition $PARTITION has already been formatted.\n\nReformat? Doing so will erase ALL data already on that partition." 0 0 && mkfs.vfat -F32 $"/dev/"${PARTITION} >/dev/null 2>&1
       else 
          mkfs.vfat -F32 $"/dev/"${PARTITION} >/dev/null 2>&1
       fi   
       
       # Inform users of the mountpoint options and consequences
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " UEFI Mountpoint Options " --msgbox $"\nThe bootloader(s) that can be installed later will depend on where the UEFI partition is mounted.\n\nSelect /boot for Gummiboot. This is recommended for beginners as the easiest option, especially where dual-booting.\n\nSelect /boot/efi for rEFInd. Although flashy, it is recommended for experienced users due to need to be manually updated.\n\nOtherwise, either mountpoint will work for Grub." 17 55
       
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select UEFI Mountpoint " --menu $"\nGummiboot (recommended) requires /boot, rEFInd requires /boot/efi, and Grub will work with either." 12 40 2 \
 	   "1" $"/boot" \
	   "2" $"/boot/efi" 2>${ANSWER}
       
       case $(cat ${ANSWER}) in
        "1") UEFI_MOUNT="/boot"
             ;;
        "2") UEFI_MOUNT="/boot/efi"
             ;;
          *) config_base_menu
             ;;
       esac
       
       mkdir -p ${MOUNTPOINT}${UEFI_MOUNT}
       mount $"/dev/"${PARTITION} ${MOUNTPOINT}${UEFI_MOUNT}
       confirm_mount ${MOUNTPOINT}${UEFI_MOUNT}     
       
    fi
    
    # All other partitions
       while [[ $NUMBER_PARTITIONS > 0 ]]; do 
             dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Additional Partition " --menu "\nSelect additional partitions in any order, or 'Done' to finish." 13 40 4 $"Done" $"-" ${PARTITIONS} 2>${ANSWER} || config_base_menu 
             PARTITION=$(cat ${ANSWER})
             
             if [[ $PARTITION == "Done" ]]; then
                break;
             else
                MOUNT=""
                
                select_filesystem
	            if [[ $FILESYSTEM != "skip" ]]; then	
	               ${FILESYSTEM} $"/dev/"${PARTITION} >/dev/null 2>&1
	            fi
                
                # Don't give /boot as an example for UEFI systems!
                if [[ $UEFI -eq 1 ]]; then
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Name Partition: $PARTITON " --inputbox "\nExamples include: /home or /var.\n\nEnsure the name is preceeded by a forward slash (/)." 11 65 "/" 2>${ANSWER} || config_base_menu
                else
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Name Partition: $PARTITON " --inputbox "\nExamples include: /boot or /home.\n\nEnsure the name is preceeded by a forward slash (/)." 11 65 "/" 2>${ANSWER} || config_base_menu
                fi
                MOUNT=$(cat ${ANSWER})
                
                # Ensure that partitions to mount are properly named
                if [[ ${MOUNT:0:1} == "/" ]] && [[ ${MOUNT:1:1} != "/" ]] && [[ ${MOUNT:1:1} != " " ]] && [[ ${#MOUNT} > 1 ]]; then     
                      mkdir -p ${MOUNTPOINT}${MOUNT}
                      mount $"/dev/"${PARTITION} ${MOUNTPOINT}${MOUNT}
                      confirm_mount ${MOUNTPOINT}${MOUNT}
                else
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Partition Name Error " --msgbox "\nPartition cannot be mounted. A name must be given after a forward slash.\n\n" 0 0
                fi
                
             fi
       done
}	
	
######################################################################
##																	##
##                    Installation Functions						##
##																	##
######################################################################	

install_base() {
    
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Base " \
    --menu $"\nThe latest kernel supports newer hardware. The LTS kernel is more stable, and is supported far longer.\n\nThe base-devel package group will be required to use the Arch User Repository (AUR)." 18 45 4 \
 	"1" $"Latest Kernel" \
	"2" $"Latest Kernel & base-devel" \
	"3" $"LTS Kernel" \
	"4" $"LTS Kernel & base-devel" 2>${ANSWER}	

    case $(cat ${ANSWER}) in
        "1") # Latest Kernel
             clear
             pacstrap ${MOUNTPOINT} base btrfs-progs ntp sudo 
             ;;
        "2") # Latest Kernel and base-devel
             clear
             pacstrap ${MOUNTPOINT} base base-devel btrfs-progs ntp sudo
             ;;
        "3") # LTS Kernel
             clear
             pacstrap ${MOUNTPOINT} bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux-lts logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils pcmciautils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which xfsprogs btrfs-progs ntp sudo
             LTS=1
             ;;
        "4") # LTS Kernel and base-devel
             clear
             pacstrap ${MOUNTPOINT} bash bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils jfsutils less licenses linux-lts logrotate lvm2 man-db man-pages mdadm nano netctl pacman pciutils pcmciautils perl procps-ng psmisc reiserfsprogs s-nail sed shadow sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux vi which xfsprogs base-devel btrfs-progs ntp sudo
             LTS=1
             ;;
          *) install_base_menu
             ;;
    esac  	

  #check for a wireless device
  WIRELESS_DEV=`ip link | grep wlp | awk '{print $2}'| sed 's/://' | sed '1!d'`
  if [[ -n $WIRELESS_DEV ]]; then
     dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Wireless Device Detected " --infobox "\nInstalling supplementary wireless packages..." 7 40 
     sleep 2
     clear
     pacstrap ${MOUNTPOINT} iw wireless_tools wpa_actiond wpa_supplicant dialog
  fi

}

# Adapted from AIS. Integrated the configuration elements. For UEFI systems fixed the 
# gummiboot installation and dropped Syslinux.
install_bootloader() {

bios_bootloader() {	
	
   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install BIOS Bootloader " \
    --menu $"\nGrub2 is recommended for beginners. The installation device can also be selected.\n\nSyslinux is a lighter and simpler alternative, usually used to boot Linux installation media. It will only work with 'ext' filesystems, however." 16 50 2 \
 	"1" $"Install Grub2" \
	"2" $"Install Syslinux" 2>${ANSWER}
	
	case $(cat ${ANSWER}) in
        "1") clear
             pacstrap ${MOUNTPOINT} grub os-prober
             dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Grub Device " --yesno "\nInstall Grub on the same device/hard-drive as Root ($INST_DEV)?\n\nPick 'Yes' if you are only installing on one device." 10 60 \
			 && clear && arch_chroot "grub-install --target=i386-pc --recheck ${INST_DEV}" || select_grub_device
             # Whatever the choice, same configuration process
             arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
             ;;
        "2") clear
             pacstrap ${MOUNTPOINT} syslinux
             arch_chroot "syslinux-install_update -iam"
             sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
             # If the LTS kernel has been installed amend the config file accordingly
             [[ $LTS -eq 1 ]] && sed -i 's/linux/linux-lts/g' ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
             dialog --title " Syslinux Configuration Check " --msgbox "\nPlease check the syslinux configuration file.\n\nIt should contain the command:\nAPPEND root=/dev/$ROOT_PART rw\n" 10 50
             gksu leafpad ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
             ;;
          *) install_base_menu
             ;;
    esac  
}

uefi_bootloader() {

    #Ensure again that efivarfs is mounted
	[[ -z $(mount | grep /sys/firmware/efi/efivars) ]] && mount -t efivarfs efivarfs /sys/firmware/efi/efivars
     
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install UEFI Bootloader " \
    --menu $"\nGrub2 is the most popular and feature-rich option (no UEFI mount preference).\n\nGummiboot is a recommended alternative for beginners (UEFI partition must be at /boot).\n\nrEFInd is an alternative for more experienced users (UEFI partition must be at /boot/efi)." 18 50 3 \
    "1" $"Install Grub2" \
    "2" $"Install Gummiboot" \
    "3" $"Install rEFInd" 2>${ANSWER}

     case $(cat ${ANSWER}) in
     "1") # Grub2
          clear
          pacstrap ${MOUNTPOINT} grub os-prober efibootmgr dosfstools
          arch_chroot "grub-install --target=x86_64-efi --efi-directory=${UEFI_MOUNT} --bootloader-id=arch_grub --recheck"
          arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"

          # Ask if user wishes to set Grub as the default bootloader and act accordingly
          dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set Grub as Default Bootloader? " --yesno $"\nSome UEFI firmware may not detect Grub unless it is set as the default bootloader, resulting in an unbootable system in such instances.\n\nDo you wish to set Grub as the default bootloader?\n\nIt is recommended to select 'Yes', especially for beginners. This will copy the bootable grubx64.efi stub to ${UEFI_MOUNT}/EFI/boot and rename it to bootx64.efi, as required.\n\nOtherwise select 'No', particularly if there is already a default bootloader, and/or where intending to use multiple bootloaders." 18 65 \
          && arch_chroot "mkdir ${UEFI_MOUNT}/EFI/boot" \
          && arch_chroot "cp -r ${UEFI_MOUNT}/EFI/arch_grub/grubx64.efi ${UEFI_MOUNT}/EFI/boot/bootx64.efi" \
          && dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " UEFI File Copied " --infobox "\nGrub has been set as the default bootloader.\n" 6 30 \
          && sleep 2
          ;;
          
     "2") # Gummiboot
          clear
          pacstrap ${MOUNTPOINT} gummiboot efibootmgr dosfstools
          arch_chroot "gummiboot --path=${UEFI_MOUNT} install"
          partuuid=`blkid -s PARTUUID $"/dev/"${ROOT_PART} | awk '{print $2}' | sed 's/"//g' | sed 's/^.*=//'`
             
          # Deal with LTS Kernel
          if [[ $LTS -eq 1 ]]; then
             echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux-lts\ninitrd\t/initramfs-linux-lts.img\noptions\troot=PARTUUID=${partuuid} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
          else
             echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=PARTUUID=${partuuid} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
          fi
          
          # Set and check the config files  
          echo -e "default  arch\ntimeout  5" > ${MOUNTPOINT}${UEFI_MOUNT}/loader/loader.conf
          dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Gummiboot Configuration Check " --msgbox "\nPlease check the arch and loader configuration files before closing them to continue.\n" 8 40
          gksu leafpad ${MOUNTPOINT}${UEFI_MOUNT}/loader/entries/arch.conf
          gksu leafpad ${MOUNTPOINT}${UEFI_MOUNT}/loader/loader.conf
          ;;
          
      "3") # rEFInd
           # Ensure that UEFI partition has been mounted to /boot/efi due to bug in script. Could "fix" it for installation, but
           # This could result in unknown consequences should the script be updated at some point.
           if [[ $UEFI_MOUNT == "/boot/efi" ]]; then      
              clear
              pacstrap ${MOUNTPOINT} refind-efi efibootmgr dosfstools    
              dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Set rEFInd as Default Bootloader? " --yesno $"\nSome UEFI firmware may not detect rEFInd unless it is set as the default bootloader, resulting in an unbootable system in such instances.\n\nDo you wish to set rEFInd as the default bootloader?\n\nIt is recommended to select 'Yes', especially for beginners. This will install rEFInd to ${UEFI_MOUNT}/EFI/boot with the bootx64.efi stub required.\n\nOtherwise select 'No', particularly if there is already a default bootloader, and/or where intending to use multiple bootloaders." 18 65 \
              && clear && arch_chroot "refind-install --usedefault ${UEFI_PART} --alldrivers" || clear && arch_chroot "refind-install"
           else 
              dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " rEFInd UEFI Mountpoint " --msgbox $"\nThe rEFInd installation script will not work unless the UEFI partition has been mounted to /boot/efi. Please select either Gummiboot (recommended) or Grub." 0 0
              uefi_bootloader
           fi
           ;;
      
      *) install_base_menu
         ;;
      esac 

}

    # Set the default PATH variable
    arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"

    if [[ $UEFI -eq 0 ]]; then
       bios_bootloader
    else
       uefi_bootloader
    fi
}

# Install alsa, xorg and input drivers
# Also copy the xkbmap configuration file created earlier to the installed system
install_alsa_xorg_input() {

  dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " ALSA, Xorg, and Input " --msgbox "\nBefore installing graphics card driver(s) or desktop environments, other packages are needed first:\n\nalsa - Advanced Linux Sound Architecture\nxorg-* - open-source X window system for graphics\nxf86-input-* - open-source drivers for input devices" 12 60
  clear	
  pacstrap ${MOUNTPOINT} alsa-utils xorg-server xorg-server-utils xorg-xinit xf86-input-synaptics xf86-input-keyboard xf86-input-mouse
  cp /tmp/00-keyboard.conf ${MOUNTPOINT}/etc/X11/xorg.conf.d/00-keyboard.conf

}

setup_graphics_card() {

# basically this is used to manually set the GC_DETECTED variable. Includes proprietary NVIDIA drivers.
gc_driver_menu() {

   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Graphics Card Menu " \
    --menu $"\nPick Nouveau for older NVIDIA cards. If your card is not listed, pick 'Unknown / Generic'.\n" 19 45 9 \
 	"1" $"AMD/ATI" \
	"2" $"Intel" \
	"3" $"Nouveau (NVIDIA open-source)" \
	"4" $"NVIDIA GeForce 8/9/100-400 +" \
	"5" $"NVIDIA GeForce 6/7" \
	"6" $"Via" \
	"7" $"VirtualBox" \
    "8" $"VMWare" \
	"9" $"Unknown / Generic" 2>${ANSWER}

   case $(cat ${ANSWER}) in
        "1") GC_DETECTED="ATI"
             ;;
        "2") GC_DETECTED="Intel"
             ;;
        "3") GC_DETECTED="NVIDIA"
             ;;
        "4") GC_DETECTED="NVIDIA-GF"
             ;;            
        "5") GC_DETECTED="NVIDIA-304"
             ;;              
        "6") GC_DETECTED="Via"
             ;;            
        "7") GC_DETECTED="VirtualBox"
             ;;
        "8") GC_DETECTED="VMware"
             ;;
        "9") GC_DETECTED="Generic"
             ;;
          *) install_desktop_menu
             ;;
    esac  
    install_gc
}

# Adapted from Anterogos' CLI installer
detect_graphics_card() {
	
    if   [[ `echo ${GRAPHIC_CARD}|grep -i 'ati[[:space:]]'` != "" ]]; then
         GC_DETECTED="ATI" 
    elif [[ `echo ${GRAPHIC_CARD}|grep -i 'nvidia[[:space:]]'` != "" ]]; then
         GC_DETECTED="NVIDIA" 
    elif [[ `echo ${GRAPHIC_CARD}|grep -i 'intel[[:space:]]'` != "" ]] || [ `echo ${GRAPHIC_CARD}|grep -i 'lenovo[[:space:]]'` != "" ]]; then
         GC_DETECTED="Intel"
    elif [[ `echo ${GRAPHIC_CARD}|grep -i 'virtualbox[[:space:]]'` != "" ]]; then
         GC_DETECTED="VirtualBox"
    elif [[ `echo ${GRAPHIC_CARD}|grep -i 'vmware[[:space:]]'` != "" ]]; then
         GC_DETECTED="VMware"
    elif [[ `echo ${GRAPHIC_CARD}|grep -i 'via[[:space:]]'` != "" ]]; then
         GC_DETECTED="Via"
    else
         GC_DETECTED="Unknown"
    fi

}

install_gc() {

 clear
 
 case $GC_DETECTED in
        "ATI") pacstrap ${MOUNTPOINT} xf86-video-ati ati-dri mesa-libgl mesa
               sed -i 's/^MODULES=(/MODULES=(radeon /' ${MOUNTPOINT}/etc/mkinitcpio.conf
               ;;
     "NVIDIA") pacstrap ${MOUNTPOINT} xf86-video-nouveau nouveau-dri mesa-libgl mesa
               sed -i 's/^MODULES=(/MODULES=(nouveau /' ${MOUNTPOINT}/etc/mkinitcpio.conf
               ;;
  "NVIDIA-GF") #first remove mesa to avoid file conflicts
               arch_chroot "pacman -Rdds --noconfirm mesa-libgl mesa"
  
               # Now deal with kernel installed
               [[ $LTS == 0 ]] && pacstrap ${MOUNTPOINT} nvidia nvidia-libgl nvidia-utils pangox-compat \
               || pacstrap ${MOUNTPOINT} nvidia-lts nvidia-libgl nvidia-utils pangox-compat
               NVIDIA_INST=1
               ;;
 "NVIDIA-304") #first remove mesa to avoid file conflicts
               arch_chroot "pacman -Rdds --noconfirm mesa-libgl mesa"
 
               # Now deal with kernel installed
               [[ $LTS == 0 ]] && pacstrap ${MOUNTPOINT} nvidia-304xx nvidia-304xx-libgl nvidia-304xx-utils \
               || pacstrap ${MOUNTPOINT}  nvidia-304xx-lts nvidia-304xx-libgl nvidia-304xx-utils
               NVIDIA_INST=1
               ;;
      "Intel") pacstrap ${MOUNTPOINT} xf86-video-intel intel-dri libva-intel-driver mesa-libgl mesa
               sed -i 's/^MODULES=(/MODULES=(i915 /' ${MOUNTPOINT}/etc/mkinitcpio.conf
               ;;
 "VirtualBox") dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " VirtualBox Installation " --msgbox "\nIf for any reason the VirtualBox guest modules do not load for the installed system (e.g. low resolution and scrollbars after booting), a one-off series of commands will fix this:\n\n$ su\n# depmod -a\n# modprobe -a vboxvideo vboxguest vboxsf\n# reboot" 0 0
               clear
               [[ $LTS == 0 ]] && pacstrap ${MOUNTPOINT} virtualbox-guest-utils virtualbox-guest-modules mesa-libgl \
               || pacstrap ${MOUNTPOINT} virtualbox-guest-utils virtualbox-guest-modules-lts mesa-libgl
      
               # Load modules and enable vboxservice whatever the kernel
               arch_chroot "modprobe -a vboxguest vboxsf vboxvideo"  
               arch_chroot "systemctl enable vboxservice"
               ;;
     "VMWare") pacstrap ${MOUNTPOINT} xf86-video-vmware xf86-input-vmmouse mesa-libgl mesa
               ;;
        "Via") pacstrap ${MOUNTPOINT} xf86-video-openchrome
               ;;
    "Generic") pacstrap ${MOUNTPOINT} xf86-video-modesetting mesa-libgl mesa
               ;;
            *) gc_driver_menu  
               ;;
 esac

 # Create a basic xorg configuration file for NVIDIA proprietary drivers where installed
 if [[ $NVIDIA_INST == 1 ]]; then
    echo "Section "\"Device"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        Identifier "\"Nvidia Card"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        Driver "\"nvidia"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        VendorName "\"NVIDIA Corporation"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        Option "\"NoLogo"\" "\"true"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        #Option "\"UseEDID"\" "\"false"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        #Option "\"ConnectedMonitor"\" "\"DFP"\"" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "        # ..." >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
    echo "EndSection" >> ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf

    # Allow user to check and amend the file
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " NVIDIA Configuration Check " --msgbox "\nA basic NVIDIA configuration file has been created. Please check it before closing to continue.\n" 8 40
    gksu leafpad ${MOUNTPOINT}/etc/X11/xorg.conf.d/20-nvidia.conf
 fi

}

    detect_graphics_card
    if [[ $GC_DETECTED == "Unknown" ]]; then
       gc_driver_menu
    else
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $GC_DETECTED Detected " --yesno "\nIs your graphics card $GC_DETECTED?\n\n-Select 'Yes' to install its OPEN-SOURCE driver.\n\n-Select 'No' to open the graphics card menu, which includes proprietary NVIDIA drivers." 0 0 && install_gc || gc_driver_menu
    fi

}


install_de_wm() {

   # Only show this information box once
   if [[ $SHOW_ONCE -eq 0 ]]; then
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Desktop Environments " --msgbox "\nThis option can be repeated to install multiple environments.\n\nGnome, KDE, and LXDE come with a display manager.\n\nCinnamon, Gnome and KDE come with a Network Manager.\n" 13 55
      SHOW_ONCE=1
   fi
   
	dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Desktop Environments  " \
    --menu "\nDesktop Environments are listed first, and may have multiple download options.\n\nKDE is a 750MB+ download." 19 45 8 \
 	"1" $"Cinnamon" \
	"2" $"Enlightenment" \
	"3" $"Gnome-Shell (minimal)" \
	"4" $"Gnome" \
	"5" $"Gnome + Extras" \
    "6" $"KDE Base (minimal)" \
    "7" $"KDE" \
    "8" $"LXDE" \
    "9" $"MATE" \
    "10" $"MATE + Extras" \
    "11" $"Xfce" \
    "12" $"Xfce + extras" \
    "13" $"Awesome WM" \
    "14" $"Fluxbox WM" \
	"15" $"i3 WM" \
    "16" $"Ice WM" \
    "17" $"Openbox WM" \
    "18" $"Pek WM" 2>${ANSWER}

   case $(cat ${ANSWER}) in
        "1") # Cinnamon
             clear
             pacstrap ${MOUNTPOINT} cinnamon
             ;;
        "2") # Enlightement
             clear
             pacstrap ${MOUNTPOINT} enlightenment terminology lxpolkit
             ;;
        "3") # Gnome-Shell
             clear
             pacstrap ${MOUNTPOINT} gnome-shell gdm
             GNOME_INSTALLED=1
             ;;
        "4") # Gnome
             clear
             pacstrap ${MOUNTPOINT} gnome rp-pppoe

             if [[ $NM_INSTALLED -eq 0 ]]; then         
                arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
                NM_INSTALLED=1
             fi
           
             GNOME_INSTALLED=1
             ;;            
        "5") # Gnome + Extras
             clear
             pacstrap ${MOUNTPOINT} gnome gnome-extra rp-pppoe

             if [[ $NM_INSTALLED -eq 0 ]]; then         
                arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
                NM_INSTALLED=1
             fi
           
             GNOME_INSTALLED=1
             ;;
        "6") # KDE BASE
             clear
             pacstrap ${MOUNTPOINT} kdebase-workspace kdeplasma-applets-plasma-nm
             KDE_INSTALLED=1
             ;;
        "7") # KDE 
             clear
             pacstrap ${MOUNTPOINT} kde kdeplasma-applets-plasma-nm xdg-user-dirs xdg-utils rp-pppoe

             if [[ $NM_INSTALLED -eq 0 ]]; then          
                arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
                NM_INSTALLED=1
             fi
               
             KDE_INSTALLED=1
             ;;
         "8") # LXDE
              clear
              pacstrap ${MOUNTPOINT} lxde
              LXDE_INSTALLED=1
             ;;
         "9") # MATE
              clear
              pacstrap ${MOUNTPOINT} mate
             ;;
        "10") # MATE + Extras
               clear
               pacstrap ${MOUNTPOINT} mate mate-extra
             ;;                 
        "11") # Xfce
              clear
              pacstrap ${MOUNTPOINT} xfce4 lxpolkit
             ;;            
        "12") # Xfce + Extras
              clear
              pacstrap ${MOUNTPOINT} xfce4 xfce4-goodies lxpolkit
             ;;
        "13") # Awesome
              clear
              pacstrap ${MOUNTPOINT} awesome vicious lxpolkit
             ;;
        "14") #Fluxbox
              clear 
              pacstrap ${MOUNTPOINT} fluxbox fbnews fluxter lxpolkit
             ;; 
        "15") #i3
              clear
              pacstrap ${MOUNTPOINT} i3-wm i3lock i3status lxpolkit
             ;; 
        "16") #IceWM
              clear
              pacstrap ${MOUNTPOINT} icewm icewm-themes lxpolkit
             ;; 
        "17") #Openbox
              clear
              pacstrap ${MOUNTPOINT} openbox openbox-themes lxpolkit
             ;; 
        "18") #PekWM
              clear
              pacstrap ${MOUNTPOINT} pekwm pekwm-themes lxpolkit 
             ;;            
          *) install_desktop_menu
             ;;
    esac  
    
    # Offer to install common packages
    if [[ $COMMON_INSTALLED -eq 0 ]]; then
       dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Common Packages? " --yesno "\nSome environments require common files to be installed, particularly for permissions, creation of home folders, and file manager functionality.\n\nPackages include: xterm, xdg-user-dirs, gksu, gnome-keyring, polkit, gvfs, and the gnome-icon-theme, etc. Those installing the full KDE desktop alone will not need to install these.\n\nInstall these packages? This option will only be presented ONCE.\n" 16 60 \
       && clear && pacstrap ${MOUNTPOINT} xterm gksu gnome-keyring polkit xdg-user-dirs xdg-utils gamin gvfs gvfs-afc gvfs-smb ttf-dejavu gnome-icon-theme python2-xdg bash-completion
    fi
    
    # Either way, the option will no longer be presented.
    COMMON_INSTALLED=1

}

# Determine if LXDE, Gnome, and/or KDE has been installed, and act accordingly.
install_dm() {

 if 	[[ $DM_INSTALLED -eq 0 ]]; then
	
         if    [[ $KDE_INSTALLED -eq 1 ]] && [[ $GNOME_INSTALLED -eq 0 ]]; then
               arch_chroot "systemctl enable kdm.service" >/dev/null 2>&1
               dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " KDM Enabled " --msgbox "\nAs KDE has been installed, its native display manager - KDM - has now been enabled.\n" 9 35
    
         elif  [[ $KDE_INSTALLED -eq 0 ]] && [[ $GNOME_INSTALLED -eq 1 ]]; then
               arch_chroot "systemctl enable gdm.service" >/dev/null 2>&1
               dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " GDM Enabled " --msgbox "\nAs Gnome has been installed, its native display manager - GDM - has now been enabled.\n" 9 35

         elif  [[ $KDE_INSTALLED -eq 1 ]] && [[ $GNOME_INSTALLED -eq 1 ]]; then
         
               dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Choose GDM or KDM " \
               --menu $"\nBoth Gnome and KDE have been installed. Please select your preferred display manager.\n" 12 45 2 \
 	           "1" $"GDM (Gnome)" \
	           "2" $"KDM (KDE)" 2>${ANSWER}	
	
	          case $(cat ${ANSWER}) in
              "1") arch_chroot "systemctl enable gdm.service" >/dev/null 2>&1
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " GDM Enabled " --msgbox "\nThe GDM Display Manager has been enabled." 7 45
                ;;
              "2") arch_chroot "systemctl enable kdm.service" >/dev/null 2>&1
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " KDM Enabled " --msgbox "\nThe KDM Display Manager has been enabled." 7 45
                ;;
                *) install_desktop_menu
                ;;
              esac 
         
         elif [[ $LXDE_INSTALLED -eq 1 ]]; then
              arch_chroot "systemctl enable lxdm.service" >/dev/null 2>&1
              dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " LXDM Enabled " --msgbox "\nAs LXDE has been installed, its native display manager - LXDM - has now been enabled." 9 35
         
         else 
               dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Choose Display Manager " \
               --menu $"\nPlease choose between LXDM or LightDM. LXDM is recommended for beginners.\n" 11 45 2 \
 	           "1" $"LXDM" \
	           "2" $"LightDM" 2>${ANSWER}	
	
	          case $(cat ${ANSWER}) in
              "1") # LXDM
                   clear
                   pacstrap ${MOUNTPOINT} lxdm
                   arch_chroot "systemctl enable lxdm.service" >/dev/null 2>&1
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " LXDM Enabled " --msgbox "\nThe LXDM Display Manager has been enabled." 7 50
                ;;
              "2") # LIGHTDM
                   clear
                   pacstrap ${MOUNTPOINT} lightdm lightdm-gtk3-greeter
                   arch_chroot "systemctl enable lightdm.service" >/dev/null 2>&1
                   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " LightDM Enabled " --msgbox "\nThe LightDM Display Manager has been enabled." 7 50
                ;;
                *) install_desktop_menu
                ;;
              esac 
         fi
         
         # Ensure DM option can only be run once.
         DM_INSTALLED=1
         
   # if A display manager has already been installed and enabled (DM_INSTALLED=1), show a message instead.
   else  
         dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Display Manager Installed " --msgbox "\nA display manager has already been installed and enabled." 9 35
   fi       

}

install_nm() {
   # Check to see if a NM has already been installed and enabled
   if [[ $NM_INSTALLED -eq 0 ]]; then
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Choose Network Manager " \
      --menu $"\nNetwork Manager is recommended, especially for wireless and PPPoE/DSL connections.\n" 14 45 4 \
 	  "1" $"Connman (command line)" \
	  "2" $"dhcpcd  (command line)" \
	  "3" $"Network Manager (graphical)" \
	  "4" $"WICD (graphical)" 2>${ANSWER}	
	
	  case $(cat ${ANSWER}) in
      "1") # connman
           clear
           pacstrap ${MOUNTPOINT} connman 
           arch_chroot "systemctl enable connman.service" 
           ;;
      "2") # dhcpcd
           clear
           arch_chroot "systemctl enable dhcpcd.service"
           ;;
      "3") # Network Manager
           clear
           pacstrap ${MOUNTPOINT} networkmanager network-manager-applet rp-pppoe
           arch_chroot "systemctl enable NetworkManager.service && systemctl enable NetworkManager-dispatcher.service"
           ;;
      "4") # WICD
           clear
           pacstrap ${MOUNTPOINT} wicd-gtk
           arch_chroot "systemctl enable wicd.service"
           ;;
        *) install_desktop_menu
           ;;
      esac
      
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Network Manager Installed " --msgbox "\nThe network connection manager has been installed and enabled." 9 35
      NM_INSTALLED=1
   
   else
      dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Network Manager Installed " --msgbox "\nA network connection manager has already been installed and enabled." 9 35
   fi
}


test() {
	
	ping -c 3 google.com > /tmp/.outfile &
    dialog --title "checking" --no-kill --tailboxbg /tmp/.outfile 20 60 

}
	


######################################################################
##																	##
##                 Main Interfaces       							##
##																	##
######################################################################

# Greet the user when first starting the installer
greeting() {

dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Welcome to $VERSION " --msgbox "\nHighlight options by pressing their numbers or by using the up/down arrow keys before pressing [enter] to confirm.\n\nSwitch between buttons by using [Tab] or the left/right arrow keys before pressing [enter] to confirm.\n\nA mouse/touchpad may also be used.\n" 0 0	

}

# Preparation
prep_menu() {
	
	if [[ $SUB_MENU != "prep_menu" ]]; then
	   SUB_MENU="prep_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 5 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi
	
   dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Prepare Installation " \
    --menu $"\nThe desktop keyboard layout will be used for both the installer and - where installing a desktop environment - the installed system.\n" 15 50 5 \
 	"1" $"Set Desktop Keyboard Layout" \
	"2" $"Configure Installer Mirrorlist (optional)" \
	"3" $"Partition Disk" \
	"4" $"Mount Partitions" \
	"5" $"Back" 2>${ANSWER}

    HIGHLIGHT_SUB=$(cat ${ANSWER})
	case $(cat ${ANSWER}) in
        "1") set_xkbmap 
             ;;
        "2") configure_mirrorlist
             ;;
        "3") umount_partitions
             select_device
             create_partitions
             ;;
        "4") mount_partitions
             ;;        
          *) main_menu_online
             ;;
    esac
    
    prep_menu  	
	
}

# Base Installation
install_base_menu() {

	if [[ $SUB_MENU != "install_base_menu" ]]; then
	   SUB_MENU="install_base_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 3 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi

   dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Base " --menu "\nIt will not be necessary to install a bootloader where installing alongside an existing Linux distro that uses Grub; just update its Grub instead." 14 45 3 \
 	"1" $"Install Base" \
	"2" $"Install Bootloader" \
	"3" $"Back" 2>${ANSWER}	
	
	HIGHLIGHT_SUB=$(cat ${ANSWER})
	case $(cat ${ANSWER}) in
        "1") install_base 
             ;;
        "2") install_bootloader
             ;;
          *) main_menu_online
             ;;
    esac
    
    install_base_menu 	
}

# Base Configuration
config_base_menu() {
	
	# Set the default PATH variable
    arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl"
	
	if [[ $SUB_MENU != "config_base_menu" ]]; then
	   SUB_MENU="config_base_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 7 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi

    dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Configure Base" --menu $"\nBasic configuration of the base is required. This includes setting basic networking, time, language, and keyboard defaults for the installed system." 18 50 7 \
 	"1" $"Generate FSTAB" \
	"2" $"Set Hostname" \
	"3" $"Set Timezone" \
	"4" $"Set Hardware Clock" \
	"5" $"Set System Locale" \
	"6" $"Set Virtual Console" \
	"7" $"Back" 2>${ANSWER}	
	
	HIGHLIGHT_SUB=$(cat ${ANSWER})
	case $(cat ${ANSWER}) in
        "1") generate_fstab 
             ;;
        "2") set_hostname
             ;;
        "3") set_timezone
             ;;
        "4") set_hw_clock
             ;;            
        "5") set_locale
             ;;
        "6") set_keymap
             ;;            
          *) main_menu_online
             ;;
    esac
    
    config_base_menu

}

# Root and User Configuration
config_user_menu() {

	if [[ $SUB_MENU != "config_user_menu" ]]; then
	   SUB_MENU="config_user_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 3 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi

    dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Configure User(s)" --menu $"\nRoot is the default 'super-user' or 'admin' account. The same password can be set for both Root and any personal user accounts created." 13 50 3 \
 	"1" $"Set Root Pasword" \
	"2" $"Add New User(s)" \
	"3" $"Back" 2>${ANSWER}
	
	HIGHLIGHT_SUB=$(cat ${ANSWER})
    case $(cat ${ANSWER}) in
    "1") set_root_password 
         ;;
    "2") create_new_user
         ;;     
      *) main_menu_online
         ;;
    esac
    
    config_user_menu
}


install_desktop_menu() {

	if [[ $SUB_MENU != "install_deskop_menu" ]]; then
	   SUB_MENU="install_deskop_menu"
	   HIGHLIGHT_SUB=1
	else
	   if [[ $HIGHLIGHT_SUB != 5 ]]; then
	      HIGHLIGHT_SUB=$(( HIGHLIGHT_SUB + 1 ))
	   fi
	fi

    dialog --default-item ${HIGHLIGHT_SUB} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Install Desktop " --menu $"\nPrior to installing a desktop environment, graphics, input, and sound drivers MUST be installed first. This will include installing graphics card drivers." 16 55 5 \
 	"1" $"Install Graphics, Input, and Sound Drivers" \
	"2" $"Install Desktop Environment(s)" \
	"3" $"Install Network Connection Manager" \
	"4" $"Install Display Manager / Login Screen" \
	"5" $"Back" 2>${ANSWER}
	
	HIGHLIGHT_SUB=$(cat ${ANSWER})
	case $(cat ${ANSWER}) in
        "1") install_alsa_xorg_input
             setup_graphics_card 
             ;;
        "2") install_de_wm
             ;;
        "3") install_nm
             ;;
        "4") install_dm
             ;;            
          *) main_menu_online
             ;;
    esac
    
    install_desktop_menu
	
}

main_menu_online() {
	
	if [[ $HIGHLIGHT != 7 ]]; then
	   HIGHLIGHT=$(( HIGHLIGHT + 1 ))
	fi
	
    dialog --default-item ${HIGHLIGHT} --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Main Menu " \
    --menu $"\nEach step must be followed IN ORDER. Once complete, select 'Done' to properly finalise the installation.\n" 17 50 7 \
 	"1" $"Prepare Installation" \
	"2" $"Install Base" \
	"3" $"Configure Base" \
	"4" $"Configure User Account(s)" \
	"5" $"Install Desktop(s)" \
    "6" $"Run Mkinitcpio" \
	"7" $"Done" 2>${ANSWER}

    HIGHLIGHT=$(cat ${ANSWER})
    case $(cat ${ANSWER}) in
        "1") prep_menu 
             ;;
        "2") install_base_menu
             ;;
        "3") config_base_menu
             ;;
        "4") config_user_menu
             ;;            
        "5") install_desktop_menu
             ;;
        "6") run_mkinitcpio
             ;;            
          *) (dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --yesno $"Close installer?" 0 0) && umount_partitions && exit 0 || main_menu_online
             ;;
    esac
    
    main_menu_online 
    
}

# Not used yet.
mode_menu() {

   dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Installation Mode " \
    --menu $"\nOn-line: Install the latest packages from the Arch repositories to build a custom system.\nInternet connection required.\n\nOff-line: Install Evo from this ISO.\nNo internet connection required.\n" 15 50 2 \
 	"1" $"On-line  Mode" \
	"2" $"Off-line Mode" 2>${ANSWER}
	MODE=$(cat ${ANSWER})
	
	while true; do
      if   [[ $MODE == "1" ]]; then
           main_menu_online
      elif [[ $MODE == "2" ]]; then
           dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --msgbox $"This option is not available yet" 6 50 && mode_menu
      else         
          (dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " End Installation "--yesno $"Close installer?" 0 0) && exit 0 || mode_menu
      fi         
     done
	
}

######################################################################
##																	##
##                        Execution     							##
##																	##
######################################################################


check_evo_requirements
id_system
greeting

	while true; do
          main_menu_online      
    done
